ourAutoTest=ourAuto[testids,]
library(leaps)
res=regsubsets(mpg~.,nbest=1,data=ourAutoTrain)
sumres=summary(res)
sumres
plot(res,scale="bic")
sumres$bic
which.min(sumres$bic)
coef(res,id=which.min(sumres$bic))
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
summary(testLm)
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.cv10=cv.lm(Auto,coef(res,id=complexity,K=10))
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.cv10=cv.lm(df=ourAutoTrain,coef(res,id=complexity,K=10))
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.cv10=cv.lm(df=mpg,coef(res,id=complexity,K=10))
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.cv10=cv.lm(df=mpg,coef(res,id=complexity,K=10))
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=Auto)
lm.cv10=cv.lm(df=mpg,coef(res,id=complexity),K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,results="hold",message = FALSE,warning=FALSE)
# Chunk 2
library(ISLR)
ourAuto=data.frame("mpg"=Auto$mpg,"cylinders"=factor(cut(Auto$cylinders,2)),
"displace"=Auto$displacement,"horsepower"=Auto$horsepower,
"weight"=Auto$weight,"acceleration"=Auto$acceleration,
"year"=Auto$year,"origin"=as.factor(Auto$origin))
colnames(ourAuto)
ntot=dim(ourAuto)[1]
ntot
set.seed(4268)
testids=sort(sample(1:ntot,ceiling(0.2*ntot),replace=FALSE))
ourAutoTrain=ourAuto[-testids,]
ourAutoTest=ourAuto[testids,]
library(leaps)
res=regsubsets(mpg~.,nbest=1,data=ourAutoTrain)
sumres=summary(res)
sumres
plot(res,scale="bic")
sumres$bic
which.min(sumres$bic)
coef(res,id=which.min(sumres$bic))
# Chunk 3
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
# Chunk 4
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
# Chunk 5
# MSE on test set
# Chunk 6
library(glmnet)
set.seed(4268)
x=model.matrix(mpg~.,ourAutoTrain)[,-1] #-1 to remove the intercept.
head(x)
y=ourAutoTrain$mpg
lambda=c(seq(from=5,to=0.1,length.out=150),0.01,0.0001) #Create a set of tuning parameters, adding low value to also see least squares fit
cv.out=cv.glmnet(x,y,alpha=1,nfolds=10,lambda=lambda, standardize=TRUE) #alpha=1 gives lasso, alpha=0 gives ridge
plot(cv.out)
# Chunk 7
# need some R code here
# Chunk 8
# fit the lasso
# Chunk 9
# 0 for cylinder, displace, horsepower, weight, acceleration, year, 0 for origin2 and 0 for origin3
newx=matrix(c(0,150,100,3000,10,82,0,0),nrow=1)
# then do the prediction
# Chunk 10
library(gam)
# write R code
install.packages("cv")
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
glm.fit=glm(mpg~.,data=ourAutoTrain)
glm.cv10=cv.glm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.glm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(boot)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.glm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(boot)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(boot)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(boot)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(boot)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(DAAG)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
install.packages("DAAG")
library(caret)
library(leaps)
library(DAAG)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(df=mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(DAAG)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(mpg,lm.fit,K=10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(DAAG)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
lm.cv10=cv.lm(mpg,lm.fit,10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(DAAG)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
summary(lm.fit)
lm.cv10=cv.lm(mpg,lm.fit,10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
library(caret)
library(leaps)
library(DAAG)
testMSEvec10=NULL
for (complexity in 1:10)
{
lm.fit=lm(mpg~.,data=ourAutoTrain)
summary(lm.fit)
lm.cv10=cv.lm(mpg,coef(res,id=complexity),10)
testMSEvec10=c(testMSEvec10,lm.cv10$delta[1])
}
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
mpg
yhat=
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
mpg~.
yhat=
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
ourAutoTrain
yhat=
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
ourAutoTrain$cylinders
yhat=
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
ourAutoTrain$cylinders,displace
yhat=
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
ourAutoTrain$cylinders+displace
yhat=
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
ourAutoTrain[,c(2,3,4,5,7,8)]
yhat=
testLm=lm(mpg~. -acceleration, data=ourAutoTest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
yhat=predict(trainLm,ourAutoTrain)
mean((ourAutoTest$mpg-yhat)^2)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
yhat=predict(trainLm,ourAutoTest)
mean((ourAutoTest$mpg-yhat)^2)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
yhat=predict(trainLm,ourAutoTest)
mean((ourAutoTest$mpg-yhat)^2)
rstudent(trainLm)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
yhat=predict(trainLm,ourAutoTest)
mean((ourAutoTest$mpg-yhat)^2)
ad.test(rstudent(trainLm))
install.packages("nortest")
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
yhat=predict(trainLm,ourAutoTest)
mean((ourAutoTest$mpg-yhat)^2)
ad.test(rstudent(trainLm))
library(nortest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
yhat=predict(trainLm,ourAutoTest)
mean((ourAutoTest$mpg-yhat)^2)
ad.test(rstudent(trainLm))
library(caret)
library(leaps)
predict.regsubsets =function (object , newdata ,id ,...){
form=as.formula (object$call [[2]])
mat=model.matrix(form ,newdata )
coefi=coef(object ,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k=10
set.seed(4268)
folds=sample (1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors =matrix (NA,k,8, dimnames =list(NULL , paste (1:8) ))
View(cv.errors)
View(cv.errors)
library(caret)
library(leaps)
predict.regsubsets =function (object , newdata ,id ,...){
form=as.formula (object$call [[2]])
mat=model.matrix(form ,newdata )
coefi=coef(object ,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k=10
set.seed(4268)
folds=sample (1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors =matrix (NA,k,8, dimnames =list(NULL , paste (1:8) ))
for(j in 1:k){
best.fit=regsubsets (mpg∼.,data=ourAutoTrain[folds!=j,])
for(i in 1:8){
pred=predict.regsubsets(best.fit ,ourAutoTrain[folds ==j,],id=i)
cv.errors[j,i]= mean((ourAutoTrain$mpg[ folds==j]-pred)^2)
}
}
View(cv.errors)
View(cv.errors)
library(caret)
library(leaps)
predict.regsubsets =function (object , newdata ,id ,...){
form=as.formula (object$call [[2]])
mat=model.matrix(form ,newdata )
coefi=coef(object ,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k=10
set.seed(4268)
folds=sample (1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors =matrix (NA,k,8, dimnames =list(NULL , paste (1:8) ))
for(j in 1:k){
best.fit=regsubsets (mpg∼.,data=ourAutoTrain[folds!=j,])
for(i in 1:8){
pred=predict.regsubsets(best.fit ,ourAutoTrain[folds ==j,],id=i)
cv.errors[j,i]= mean((ourAutoTrain$mpg[ folds==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors ,2, mean)
mean.cv.errors
library(caret)
library(leaps)
predict.regsubsets =function (object , newdata ,id ,...){
form=as.formula (object$call [[2]])
mat=model.matrix(form ,newdata )
coefi=coef(object ,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k=10
set.seed(4268)
folds=sample (1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors =matrix (NA,k,8, dimnames =list(NULL , paste (1:8) ))
for(j in 1:k){
best.fit=regsubsets (mpg∼.,data=ourAutoTrain[folds!=j,])
for(i in 1:8){
pred=predict.regsubsets(best.fit ,ourAutoTrain[folds ==j,],id=i)
cv.errors[j,i]= mean((ourAutoTrain$mpg[ folds==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors ,2, mean)
min(mean.cv.errors)
library(caret)
library(leaps)
predict.regsubsets =function (object , newdata ,id ,...){
form=as.formula (object$call [[2]])
mat=model.matrix(form ,newdata )
coefi=coef(object ,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k=10
set.seed(4268)
folds=sample (1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors =matrix (NA,k,8, dimnames =list(NULL , paste (1:8) ))
for(j in 1:k){
best.fit=regsubsets (mpg∼.,data=ourAutoTrain[folds!=j,])
for(i in 1:8){
pred=predict.regsubsets(best.fit ,ourAutoTrain[folds ==j,],id=i)
cv.errors[j,i]= mean((ourAutoTrain$mpg[ folds==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors ,2, mean)
which.min(mean.cv.errors)
library(caret)
library(leaps)
predict.regsubsets =function (object , newdata ,id ,...){
form=as.formula (object$call [[2]])
mat=model.matrix(form ,newdata )
coefi=coef(object ,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k=10
set.seed(4268)
folds=sample (1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors =matrix (NA,k,8, dimnames =list(NULL , paste (1:8) ))
for(j in 1:k){
best.fit=regsubsets (mpg∼.,data=ourAutoTrain[folds!=j,])
for(i in 1:8){
pred=predict.regsubsets(best.fit ,ourAutoTrain[folds ==j,],id=i)
cv.errors[j,i]= mean((ourAutoTrain$mpg[ folds==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors ,2, mean)
which.min(mean.cv.errors)
library(caret)
library(leaps)
predict.regsubsets =function (object,newdata,id,...){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object ,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k=10
set.seed(4268)
folds=sample(1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors=matrix (NA,k,8, dimnames=list(NULL,paste(1:8)))
for(j in 1:k){
best.fit=regsubsets(mpg∼.,data=ourAutoTrain[folds!=j,])
for(i in 1:8){
pred=predict.regsubsets(best.fit ,ourAutoTrain[folds ==j,],id=i)
cv.errors[j,i]=mean((ourAutoTrain$mpg[folds==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors ,2, mean)
which.min(mean.cv.errors)
library(caret)
library(leaps)
predict.regsubsets=function(object,newdata,id){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
cvars=names(coefi)
}
k=10
set.seed(4268)
folds=sample(1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors=matrix(NA,k,8,dimnames=list(NULL,paste(1:8)))
for (j in 1:k){
best.fit=regsubsets(mpg~.,data=ourAutoTrain[folds!=j,])
for (i in 1:8){
pred=predict.regsubsets(best.fit,ourAutoTrain[folds==j,],id=i)
cv.errors[j,i]=mean((ourAutoTrain$mpg[folds==j]-pred)^2)
}
}
library(caret)
library(leaps)
predict.regsubsets=function(object,newdata,id){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
k=10
set.seed(4268)
folds=sample(1:k,nrow(ourAutoTrain),replace=TRUE)
cv.errors=matrix(NA,k,8,dimnames=list(NULL,paste(1:8)))
for (j in 1:k){
best.fit=regsubsets(mpg~.,data=ourAutoTrain[folds!=j,])
for (i in 1:8){
pred=predict.regsubsets(best.fit,ourAutoTrain[folds==j,],id=i)
cv.errors[j,i]=mean((ourAutoTrain$mpg[folds==j]-pred)^2)
}
}
library(nortest)
trainLm=lm(mpg~. -acceleration, data=ourAutoTrain)
summary(trainLm)
ad.test(rstudent(trainLm))
yhat=predict(trainLm,ourAutoTest)
MSE_test=mean((ourAutoTest$mpg-yhat)^2)
MSE_test
